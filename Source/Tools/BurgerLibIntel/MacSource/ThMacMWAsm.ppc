;
; Assembly for thread manager
; Power PC version
; Optimized and written by Bill Heineman
; Copyright Bill Heineman
;

;
; Word MutexLock(Mutex_t *Input)
; Lock the mutex object. Use the powerpc lock
; instructions to make sure that a different
; cpu did not modify my variable while I was
; using it.
;

		EXPORT	MutexLock[DS],.MutexLock[PR]
		EXPORT	MutexUnlock[DS],.MutexUnlock[PR]
	
	TOC
		tc	MutexLock[TC],MutexLock[DS]
		tc	MutexUnlock[TC],MutexUnlock[DS]
	
	CSECT	MutexLock[DS]
		dc.l	.MutexLock[PR]
		dc.l	TOC[tc0]

	CSECT	.MutexLock[PR]

		li		r5,1			;I need a TRUE
Retry0:
		lwarx	r4,0,r3			;Reserve the address
		sync					;Alert other CPU's
		stwcx.	r5,0,r3			;Clear the mutex
		bne-	Retry0			;Make sure I wrote the data (In case another CPU did)
		mr		r3,r4			;Return TRUE if already locked
		blr						;Exit

;
; void MutexUnlock(Mutex_t *Input)
; Release the Mutex
;

	
	CSECT	MutexUnlock[DS]
		dc.l	.MutexUnlock[PR]
		dc.l	TOC[tc0]

	CSECT	.MutexUnlock[PR]

		li		r5,0			;I need a FALSE
Unlock0:
		lwarx	r4,0,r3			;Reserve the address
		cmpwi	r4,1			;Was it TRUE?
		bne-	Fail0			;Get out now!
		sync					;Alert other CPU's
		stwcx.	r5,r0,r3		;Clear the mutex
		bne-	Unlock0			;Make sure I wrote the data (In case another CPU did)
		blr
Fail0:
		sync					;Alert other CPU's
		stwcx.	r4,0,r3			;Clear reservation
		blr						;Exit

		END

